 import * as React from "react";
 import Banner from "../components/banner";
 import Cta from "../components/cta";
 import Contact from "../components/contact";
 import woodtexture from "../images/wood-texture.jpg";
 import ApiCall from "../components/ApiCall";
 import List from "../components/list";
 import Nearby from "../components/Nearby";
 import Opening from "../components/openClose"
 import IframeMap from "../components/IframeMap";
 import "../index.css";
 import {
   Template,
   GetPath,
   GetRedirects,
   TemplateConfig,
   TemplateProps,
   TemplateRenderProps,
   GetHeadConfig,
   HeadConfig,
 } from "@yext/pages";
 import PageLayout from "../components/PageLayout";
 
 /**
  * Required when Knowledge Graph data is used for a template.
  */
 export const config: TemplateConfig = {
   stream: {
     $id: "locations",
     // Specifies the exact data that each generated document will contain. This data is passed in
     // directly as props to the default exported function.
     fields: [
       "id",
       "uid",
       "meta",
       "name",
       "address",
       "mainPhone",
       "description",
       "hours",
       "slug",
       "timezone",
       "yextDisplayCoordinate",
       "services"
     ],
     // Defines the scope of entities that qualify for this stream.
     filter: {
       savedFilterIds: ["953846729"],
     },
     // The entity language profiles that documents will be generated for.
     localization: {
       locales: ["en"],
       primary: false,
     },
   },
 };
 
 /**
  * Defines the path that the generated file will live at for production.
  *
  * NOTE: This currently has no impact on the local dev path. Local dev urls currently
  * take on the form: featureName/entityId
  */
 export const getPath: GetPath<TemplateProps> = ({ document }) => {
   return `${document.slug.toString()}`;
 };
 
 /**
  * Defines a list of paths which will redirect to the path created by getPath.
  *
  * NOTE: This currently has no impact on the local dev path. Redirects will be setup on
  * a new deploy.
  */
 export const getRedirects: GetRedirects<TemplateProps> = ({ document }) => {
   return [`index-old/${document.id.toString()}`];
 };
 
 /**
  * This allows the user to define a function which will take in their template
  * data and procude a HeadConfig object. When the site is generated, the HeadConfig
  * will be used to generate the inner contents of the HTML document's <head> tag.
  * This can include the title, meta tags, script tags, etc.
  */
 export const getHeadConfig: GetHeadConfig<TemplateRenderProps> = ({
   relativePrefixToRoot,
   path,
   document,
 }): HeadConfig => {
   return {
     title: document.name,
     charset: "UTF-8",
     viewport: "width=device-width, initial-scale=1",
     tags: [
       {
         type: "meta",
         attributes: {
           description: "This site was generated by the Yext SSG",
         },
       },
     ],
   };
 };
 
 const Location: Template<TemplateRenderProps> = ({
   relativePrefixToRoot,
   path,
   document,
 }) => {
   const {    
     id,
     name,
     address,
     openTime,
     hours,
     mainPhone,
     timezone,
     yextDisplayCoordinate
   } = document;


   return (
     <>
      <PageLayout >
       
       <div className="w-full">
            <ul className="  text-[#024B58] text-sm font-nexa_boldregular flex mt-5 flex-row px-5 lg:px-10">
                <li className=" after:content-['>'] pr-2"><a href="/" className="pr-2"> Accueil  </a></li>
                <li className="font-nexa_lightregular pl-1">{name}</li>
            </ul>
          <Banner name={name} address={address}/>
           <Opening hours={hours} timezone={timezone}/>
              <div className=" px-5 lg:px-10">
                <div className="flex flex-wrap ">
                  <Contact address={address} phone={mainPhone} latitude={yextDisplayCoordinate.latitude}
                    longitude={yextDisplayCoordinate.longitude} hours={hours}></Contact>
                      {/* {services && <List list={services}></List>} */}
                
               
                <div className="w-full xl:w-2/4 px-0 xl:px-0 2xl:px-0 mt-5 xl:mt-0 " id="map_canvas">
                    {address && (
                      <IframeMap
                        address={address}
                      ></IframeMap>
                    )}
                </div> 
                <div className="w-full py-16 px-10 relative z-[0]">
                    <img className="lazy-load object-cover object-center absolute top-0 left-0 -z-[1] w-full h-full"
                       src={woodtexture} width="1" height="1"/>
                    <h2 className="font-evogriaregular mb-14  text-center text-[28px] mt-2  text-[#024B58]">AUTRES RESTAURANTS À PROXIMITÉ DE {address.city}</h2>

                  <div className="w-full grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-8 location-data ">  
                  <Nearby latitude={yextDisplayCoordinate.latitude} longitude={yextDisplayCoordinate.longitude} />
                  </div>
                </div>
                </div>
              </div> 
        </div>
       </PageLayout>
     </>
   );
 };
 
 export default Location;
 